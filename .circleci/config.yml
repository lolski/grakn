version: 2
references:
    prepare_apt_repositories: &prepare_apt_repositories
      run:
        name: Prepare apt repositories
        command: |
          curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
          echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
          sudo apt-get install apt-transport-https
          sudo apt-get update

    install_yarn_and_unzip: &install_yarn_and_unzip
      run: sudo apt-get -y install yarn zip unzip

    install_node: &install_node
      run:
        name: Install nvm and node
        command: |
          curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash
          export NVM_DIR="/opt/circleci/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm install v10.5.0
          nvm alias default v10.5.0
          echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
          echo "[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"" >> $BASH_ENV

    install_bazel: &install_bazel
      run:
        name: Install bazel
        command: |
          curl -OL https://github.com/bazelbuild/bazel/releases/download/0.18.0/bazel-0.18.0-installer-linux-x86_64.sh
          chmod +x bazel-0.18.0-installer-linux-x86_64.sh
          sudo ./bazel-0.18.0-installer-linux-x86_64.sh

    attach_grakn_workspace: &attach_grakn_workspace
      attach_workspace:
        at: ~/grakn

    start_grakn_server: &start_grakn_server
      run: nohup grakn-dist/target/grakn-core-test/grakn server start

    save_test_results: &save_test_results
      run:
        name: Save test results
        command: |
          mkdir -p ~/grakn-surefire-reports/
          find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/grakn-surefire-reports/ \;
        when: always

jobs:
  build:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - *prepare_apt_repositories
      - *install_yarn_and_unzip
      - *install_node
      - *install_bazel
      - run: bazel build //:distribution --sandbox_debug
      - run: mkdir dist/ && mv bazel-genfiles/dist/* dist/
      - persist_to_workspace: #share Grakn with other jobs by putting it in the workspace
          root: ~/grakn
          paths:
            - .

  test-unit:
    machine: true
    working_directory: ~/grakn
    steps:
      - *prepare_apt_repositories
      - *install_yarn_and_unzip
      - *install_node
      - *install_bazel
      - *attach_grakn_workspace
      - run: bazel test //grakn-graql/... --test_output=errors
      - run: bazel test //server/... --test_output=errors
      - run: bazel test //client-java/... --test_output=errors
      - *save_test_results
      - store_artifacts:
          path: ~/grakn-surefire-reports/
      - store_test_results:
          path: ~/grakn-surefire-reports/

  test-integration:
    machine: true
    working_directory: ~/grakn
    steps:
    - *prepare_apt_repositories
    - *install_yarn_and_unzip
    - *install_node
    - *install_bazel
    - *attach_grakn_workspace
    - run: bazel test //test-integration/test/graql/analytics:all --test_output=errors
    - *save_test_results
    - store_artifacts:
        path: ~/grakn-surefire-reports/
    - store_test_results:
        path: ~/grakn-surefire-reports/

  test-end-to-end:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - *install_bazel
      - run: bazel build //:distribution --sandbox_debug
      - run: bazel test //test-end-to-end:test-end-to-end --test_output=streamed --spawn_strategy=standalone
      - *save_test_results
      - store_artifacts:
          path: ~/grakn-surefire-reports/
      - store_test_results:
          path: ~/grakn-surefire-reports/

  client-nodejs-e2e:
      machine: true
      working_directory: ~/grakn
      steps:
        - checkout
        - *prepare_apt_repositories
        - *install_yarn_and_unzip
        - *install_node
        - *install_bazel
        - run: bazel build //:distribution --sandbox_debug
        - run: unzip bazel-genfiles/dist/grakn-core-all.zip -d bazel-genfiles/dist/
        - run: nohup bazel-genfiles/dist/grakn-core-all/grakn server start
        - run: bazel-genfiles/dist/grakn-core-all/grakn console -f `pwd`/test-end-to-end/test-fixtures/basic-genealogy.gql -k gene
        - run: bazel test //client-nodejs:test-integration --test_output=streamed

  client-python-e2e:
      machine: true
      working_directory: ~/grakn
      steps:
        - checkout
        - *prepare_apt_repositories
        - *install_yarn_and_unzip
        - *install_bazel
        - run: bazel build //:distribution --sandbox_debug
        - run: unzip bazel-genfiles/dist/grakn-core-all.zip -d bazel-genfiles/dist/
        - run: nohup bazel-genfiles/dist/grakn-core-all/grakn server start
        - run: bazel test //client_python:test_integration --test_output=streamed

  workbase-unit-tests:
      docker:
        - image: circleci/node:8.11.2
      working_directory: ~/grakn
      steps:
        - checkout
        - run: cd workbase && npm install
        - run: cd workbase && npm test

  workbase-e2e:
      machine: true
      working_directory: ~/grakn
      steps:
        - checkout
        - *prepare_apt_repositories
        - *install_yarn_and_unzip
        - *install_node
        - *install_bazel
        - run: sudo apt install xvfb libxtst6 libxss1 libgtk2.0-0 -y
        - run: sudo apt install libnss3 libasound2 libgconf-2-4 -y
        - run: bazel build //:distribution --sandbox_debug
        - run: unzip bazel-genfiles/dist/grakn-core-all.zip -d bazel-genfiles/dist/
        - run: nohup bazel-genfiles/dist/grakn-core-all/grakn server start
        - run: bazel-genfiles/dist/grakn-core-all/grakn console -f `pwd`/test-end-to-end/test-fixtures/basic-genealogy.gql -k gene
        - run: cd workbase && npm install
        - run: Xvfb :99 &
        - run: export DISPLAY=:99
        - run: cd workbase && npm run e2e

  build-workbase-linux:
      docker:
        - image: circleci/node:8.11.2
      working_directory: ~/grakn
      steps:
        - *attach_grakn_workspace
        - run: cd workbase && npm install
        - run: cd workbase && npm run build
        - run: echo 'export GRAKN_VERSION=$(echo ${CIRCLE_TAG} | cut -c 2-)' >> $BASH_ENV #remove 'v' from tag name and use it as Grakn Version to be released
        - run: mv ./workbase/build/grakn-workbase-${GRAKN_VERSION}-linux.tar.gz ~/grakn/artifacts
        - persist_to_workspace:
            root: ~/grakn
            paths:
              - artifacts/*-linux.tar.gz

  build-workbase-mac:
      macos:
          xcode: "9.0"
      working_directory: ~/grakn
      steps:
        - *attach_grakn_workspace
        - run: echo 'export GRAKN_VERSION=$(echo ${CIRCLE_TAG} | cut -c 2-)' >> $BASH_ENV #remove 'v' from tag name and use it as Grakn Version to be released
        - run: unzip artifacts/grakn-core-${GRAKN_VERSION}.zip
        - run: cd grakn-core-${GRAKN_VERSION} && nohup ./grakn server start
        - run: cd grakn-core-${GRAKN_VERSION} && ./graql console -f ./examples/basic-genealogy.gql -k gene
        - run: cd workbase && npm install
        - run: cd workbase && npm run e2e
        - run: cd workbase && npm run build
        - run: mv ./workbase/build/grakn-workbase-${GRAKN_VERSION}-mac.zip ~/grakn/artifacts
        - persist_to_workspace:
            root: ~/grakn
            paths:
              - artifacts/*-mac.zip

  publish-github-draft:
    docker:
      - image: cibuilds/github:0.10
    working_directory: ~/grakn
    steps:
      - attach_workspace:
          at: ~/grakn
      - run:
          name: "Publish Draft Release on GitHub"
          command: |
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete -draft ${CIRCLE_TAG} ./artifacts

  grakn-release-build:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - *prepare_apt_repositories
      - *install_yarn_and_unzip
      - *install_node
      - *install_bazel
      - run: echo 'export GRAKN_VERSION=$(echo ${CIRCLE_TAG} | cut -c 2-)' >> $BASH_ENV #remove 'v' from tag name and use it as Grakn Version to be released
      - run: mvn --batch-mode install -T 2.5C -DskipTests=true
      - run: mkdir ~/grakn/artifacts
      - run: mv grakn-dist/target/grakn-core-${GRAKN_VERSION}.zip ~/grakn/artifacts
      - persist_to_workspace: #share Grakn with other jobs by putting it in the workspace
          root: ~/grakn
          paths:
            - ./artifacts
            - ./workbase

workflows:
  version: 2
  run-all-tests:
    jobs:
      - build:
          filters:
            tags:
              ignore: /.*/
      - workbase-unit-tests:
          filters:
            tags:
              ignore: /.*/
      - test-unit:
          requires:
            - build
      - test-integration:
          requires:
          - build
      - test-end-to-end
      - client-nodejs-e2e
      - client-python-e2e
      - workbase-e2e

  build-and-deploy:
    jobs:
      - grakn-release-build:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-workbase-mac:
          requires:
             - grakn-release-build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-workbase-linux:
          requires:
             - grakn-release-build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-github-draft:
          requires:
            - build-workbase-mac
            - build-workbase-linux
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
